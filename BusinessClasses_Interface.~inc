(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 15.12.2020 22:07:24         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

{$IFNDEF BusinessClasses_Interface.inc}
{$DEFINE BusinessClasses_Interface.inc}

{$IFNDEF BusinessClasses_unitheader}
unit BusinessClasses;
{$ENDIF}

interface

uses
  // interface uses
  // interface dependencies
  // attribute classes
  BoldAttributes,
  // other
  Classes,
  Controls, // for TDate
  SysUtils,
  BoldDefs,
  BoldSubscription,
  BoldDeriver,
  BoldElements,
  BoldDomainElement,
  BoldSystemRT,
  BoldSystem;

type
  { forward declarations of all classes }

  TNew_ModelRoot = class;
  TNew_ModelRootList = class;
  TDetail = class;
  TDetailList = class;
  TOrder = class;
  TOrderList = class;
  TOrderService = class;
  TOrderServiceList = class;
  TService = class;
  TServiceList = class;
  TServiceDetail = class;
  TServiceDetailList = class;

  TNew_ModelRoot = class(TBoldObject)
  private
  protected
  public
  end;

  TDetail = class(TNew_ModelRoot)
  private
    function _Get_M_name: TBAString;
    function _Getname: String;
    procedure _Setname(const NewValue: String);
    function _GetAssociationEnd2: TServiceList;
    function _GetServiceDetail: TServiceDetailList;
  protected
  public
    property M_name: TBAString read _Get_M_name;
    property M_AssociationEnd2: TServiceList read _GetAssociationEnd2;
    property M_ServiceDetail: TServiceDetailList read _GetServiceDetail;
    property name: String read _Getname write _Setname;
    property AssociationEnd2: TServiceList read _GetAssociationEnd2;
    property ServiceDetail: TServiceDetailList read _GetServiceDetail;
  end;

  TOrder = class(TNew_ModelRoot)
  private
    function _Get_M_date1: TBADate;
    function _Getdate1: TDate;
    procedure _Setdate1(const NewValue: TDate);
    function _Get_M_date2: TBADate;
    function _Getdate2: TDate;
    procedure _Setdate2(const NewValue: TDate);
    function _Get_M_orderer: TBAString;
    function _Getorderer: String;
    procedure _Setorderer(const NewValue: String);
    function _Get_M_name: TBAString;
    function _Getname: String;
    procedure _Setname(const NewValue: String);
    function _GetAssociationEnd1: TServiceList;
    function _GetOrderService: TOrderServiceList;
  protected
  public
    property M_date1: TBADate read _Get_M_date1;
    property M_date2: TBADate read _Get_M_date2;
    property M_orderer: TBAString read _Get_M_orderer;
    property M_name: TBAString read _Get_M_name;
    property M_AssociationEnd1: TServiceList read _GetAssociationEnd1;
    property M_OrderService: TOrderServiceList read _GetOrderService;
    property date1: TDate read _Getdate1 write _Setdate1;
    property date2: TDate read _Getdate2 write _Setdate2;
    property orderer: String read _Getorderer write _Setorderer;
    property name: String read _Getname write _Setname;
    property AssociationEnd1: TServiceList read _GetAssociationEnd1;
    property OrderService: TOrderServiceList read _GetOrderService;
  end;

  TOrderService = class(TNew_ModelRoot)
  private
    function _GetAssociationEnd1: TService;
    function _Get_M_AssociationEnd1: TBoldObjectReference;
    function _GetAssociationEnd0: TOrder;
    function _Get_M_AssociationEnd0: TBoldObjectReference;
  protected
  public
    property M_AssociationEnd1: TBoldObjectReference read _Get_M_AssociationEnd1;
    property M_AssociationEnd0: TBoldObjectReference read _Get_M_AssociationEnd0;
    property AssociationEnd1: TService read _GetAssociationEnd1;
    property AssociationEnd0: TOrder read _GetAssociationEnd0;
  end;

  TService = class(TNew_ModelRoot)
  private
    function _Get_M_name: TBAString;
    function _Getname: String;
    procedure _Setname(const NewValue: String);
    function _GetAssociationEnd3: TDetailList;
    function _GetServiceDetail: TServiceDetailList;
    function _GetAssociationEnd0: TOrderList;
    function _GetOrderService: TOrderServiceList;
  protected
  public
    property M_name: TBAString read _Get_M_name;
    property M_AssociationEnd3: TDetailList read _GetAssociationEnd3;
    property M_ServiceDetail: TServiceDetailList read _GetServiceDetail;
    property M_AssociationEnd0: TOrderList read _GetAssociationEnd0;
    property M_OrderService: TOrderServiceList read _GetOrderService;
    property name: String read _Getname write _Setname;
    property AssociationEnd3: TDetailList read _GetAssociationEnd3;
    property ServiceDetail: TServiceDetailList read _GetServiceDetail;
    property AssociationEnd0: TOrderList read _GetAssociationEnd0;
    property OrderService: TOrderServiceList read _GetOrderService;
  end;

  TServiceDetail = class(TNew_ModelRoot)
  private
    function _GetAssociationEnd2: TService;
    function _Get_M_AssociationEnd2: TBoldObjectReference;
    function _GetAssociationEnd3: TDetail;
    function _Get_M_AssociationEnd3: TBoldObjectReference;
  protected
  public
    property M_AssociationEnd2: TBoldObjectReference read _Get_M_AssociationEnd2;
    property M_AssociationEnd3: TBoldObjectReference read _Get_M_AssociationEnd3;
    property AssociationEnd2: TService read _GetAssociationEnd2;
    property AssociationEnd3: TDetail read _GetAssociationEnd3;
  end;

  TNew_ModelRootList = class(TBoldObjectList)
  protected
    function GetBoldObject(index: Integer): TNew_ModelRoot;
    procedure SetBoldObject(index: Integer; NewObject: TNew_ModelRoot);
  public
    function Includes(anObject: TNew_ModelRoot): Boolean;
    function IndexOf(anObject: TNew_ModelRoot): Integer;
    procedure Add(NewObject: TNew_ModelRoot);
    function AddNew: TNew_ModelRoot;
    procedure Insert(index: Integer; NewObject: TNew_ModelRoot);
    property BoldObjects[index: Integer]: TNew_ModelRoot read GetBoldObject write SetBoldObject; default;
  end;

  TDetailList = class(TNew_ModelRootList)
  protected
    function GetBoldObject(index: Integer): TDetail;
    procedure SetBoldObject(index: Integer; NewObject: TDetail);
  public
    function Includes(anObject: TDetail): Boolean;
    function IndexOf(anObject: TDetail): Integer;
    procedure Add(NewObject: TDetail);
    function AddNew: TDetail;
    procedure Insert(index: Integer; NewObject: TDetail);
    property BoldObjects[index: Integer]: TDetail read GetBoldObject write SetBoldObject; default;
  end;

  TOrderList = class(TNew_ModelRootList)
  protected
    function GetBoldObject(index: Integer): TOrder;
    procedure SetBoldObject(index: Integer; NewObject: TOrder);
  public
    function Includes(anObject: TOrder): Boolean;
    function IndexOf(anObject: TOrder): Integer;
    procedure Add(NewObject: TOrder);
    function AddNew: TOrder;
    procedure Insert(index: Integer; NewObject: TOrder);
    property BoldObjects[index: Integer]: TOrder read GetBoldObject write SetBoldObject; default;
  end;

  TOrderServiceList = class(TNew_ModelRootList)
  protected
    function GetBoldObject(index: Integer): TOrderService;
    procedure SetBoldObject(index: Integer; NewObject: TOrderService);
  public
    function Includes(anObject: TOrderService): Boolean;
    function IndexOf(anObject: TOrderService): Integer;
    procedure Add(NewObject: TOrderService);
    function AddNew: TOrderService;
    procedure Insert(index: Integer; NewObject: TOrderService);
    property BoldObjects[index: Integer]: TOrderService read GetBoldObject write SetBoldObject; default;
  end;

  TServiceList = class(TNew_ModelRootList)
  protected
    function GetBoldObject(index: Integer): TService;
    procedure SetBoldObject(index: Integer; NewObject: TService);
  public
    function Includes(anObject: TService): Boolean;
    function IndexOf(anObject: TService): Integer;
    procedure Add(NewObject: TService);
    function AddNew: TService;
    procedure Insert(index: Integer; NewObject: TService);
    property BoldObjects[index: Integer]: TService read GetBoldObject write SetBoldObject; default;
  end;

  TServiceDetailList = class(TNew_ModelRootList)
  protected
    function GetBoldObject(index: Integer): TServiceDetail;
    procedure SetBoldObject(index: Integer; NewObject: TServiceDetail);
  public
    function Includes(anObject: TServiceDetail): Boolean;
    function IndexOf(anObject: TServiceDetail): Integer;
    procedure Add(NewObject: TServiceDetail);
    function AddNew: TServiceDetail;
    procedure Insert(index: Integer; NewObject: TServiceDetail);
    property BoldObjects[index: Integer]: TServiceDetail read GetBoldObject write SetBoldObject; default;
  end;

function GeneratedCodeCRC: String;

implementation

uses
  // implementation uses
  // implementation dependencies
  // other
  BoldGeneratedCodeDictionary;

{$ENDIF}
 